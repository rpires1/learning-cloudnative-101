{"componentChunkName":"component---src-pages-lectures-continuous-deployment-activities-iks-mdx","path":"/lectures/continuous-deployment/activities/iks/","result":{"pageContext":{"frontmatter":{"title":"ArgoCD Lab","description":"Lab for continuous delivery using ArgoCD","tabs":["Openshift","IKS","Minikube"]},"relativePagePath":"/lectures/continuous-deployment/activities/iks.mdx","titleType":"page","MdxNode":{"id":"bc65a53b-908b-544f-ba01-462efdad60a9","children":[],"parent":"28f64c77-bd43-511d-b5e1-341f1cde1eda","internal":{"content":"---\ntitle: ArgoCD Lab\ndescription: Lab for continuous delivery using ArgoCD\ntabs: ['Openshift', 'IKS', 'Minikube']\n---\n\n## Pre-requisites\n\nMake sure your environment is setup properly for the lab.\n\nCheck the [Environment Setup](../prerequisites/#environment-setup) page for your setup.\n\n## ArgoCD Installation\n\n- Create the namespace `argocd` to install argocd\n    ```bash\n    kubectl create namespace argocd\n    export ARGOCD_NAMESPACE=argocd\n    ```\n- Create RBAC resources\n    ```bash\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/service_account.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/role.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/role_binding.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/ibm-cloud-architecture/learning-cloudnative-101/master/static/yamls/argo-lab/argo-clusteradmin.yaml\n    ```\n\n- Install CRDs\n    ```bash\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/argo-cd/argoproj.io_applications_crd.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/argo-cd/argoproj.io_appprojects_crd.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/crds/argoproj.io_argocdexports_crd.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/crds/argoproj.io_argocds_crd.yaml\n    ```\n    Verify CRDs\n    ```bash\n    kubectl get crd -n argocd\n    ```\n    ```\n    NAME                        CREATED AT\n    applications.argoproj.io    2020-05-15T02:05:55Z\n    appprojects.argoproj.io     2020-05-15T02:05:56Z\n    argocdexports.argoproj.io   2020-05-15T02:08:21Z\n    argocds.argoproj.io         2020-05-15T02:08:21Z\n    ```\n- Deploy Operator\n    ```bash\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/operator.yaml\n    ```\n- Deploy ArgoCD CO\n    ```bash\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/examples/argocd-lb.yaml\n    ```\n    Verify that ArgoCD Pods are running\n    ```bash\n    kubectl get pods -n argocd\n    ```\n    ```\n    NAME                                                     READY   STATUS    RESTARTS   AGE\n    argocd-operator-5f7d8cf7d8-486vn                         1/1     Running   0          3m46s\n    example-argocd-application-controller-7dc5fcb75d-xkk5h   1/1     Running   0          2m3s\n    example-argocd-dex-server-bb9df96cb-ndmhl                1/1     Running   0          2m3s\n    example-argocd-redis-756b6764-sb2gt                      1/1     Running   0          2m3s\n    example-argocd-repo-server-75944fcf87-zmh48              1/1     Running   0          2m3s\n    example-argocd-server-747b684c8c-xhgl9                   1/1     Running   0          2m3s\n    ```\n    Verify that the other ArgoCD resources are created\n    ```\n    kubectl get cm,secret,svc,deploy -n argocd\n    ```\n- List the argocd-server service\n    ```bash\n    kubectl get svc example-argocd-server -n argocd\n    ```\n\n- From the script, the Argo Server service has a `type` of `LoadBalancer`. If the `ExternalIP` is in a `pending` state, then there is no loadBalancer for your cluster, so we only need the the ArgoCD server's `NodePort`. Otherwise use the `ExternalIP` and `NodePort` to access Argo.\n    ```\n    NAME                    TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)                      AGE\n    example-argocd-server   LoadBalancer   10.105.73.245   <pending>   80:31138/TCP,443:31932/TCP   5m3s\n    ```\n\n- To access the service we need the `Node's External IP` and the `NodePort`. Let's set an environment variable `ARGOCD_URL` with `NODE_EXTERNAL_IP`:`NodePort`.\n    ```bash\n    export NODE_EXTERNAL_IP=\"$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type==\"ExternalIP\")].address}')\"\n    export ARGOCD_NODEPORT=\"$(kubectl get svc example-argocd-server -n $ARGOCD_NAMESPACE -o jsonpath='{.spec.ports[0].nodePort}')\"\n    export ARGOCD_URL=\"https://$NODE_EXTERNAL_IP:$ARGOCD_NODEPORT\"\n    echo ARGOCD_URL=$ARGOCD_URL\n    ```\n\n- If you can't access the NodePort from your computer and only http/80 then edit the argocd-server and add the flag `--insecure`\n    ```bash\n    kubectl edit -n argocd deployment example-argocd-server\n    ```\n    Use the kube api to proxy into the argocd server using `kubectl port-forward`\n    ```\n    kubectl port-forward service/example-argocd-server 8080:80 -n argocd\n    ```\n    Then you can access the argocd server locally on port 8080 [http://localhost:8080](http://localhost:8080)\n\n## Deploying the app\n\n- Login using the Browser into the UI using `$ARGOCD_URL` or `localhost:8080` if using port-forward\n- Use `admin` as the username and get the password with the following command\n    ```bash\n    kubectl get secret example-argocd-cluster -n $ARGOCD_NAMESPACE -o jsonpath='{.data.admin\\.password}' | base64 -d\n    ```\n    For example the output is similar to this:\n    ```\n    tyafMb7BNvO0kP9eizx3CojrK8pYJFQq\n    ```\n\n![ArgoCD Login](./images/argocd_login.png)\n\n- Now go back to the ArgoCD home and click on `NEW APP`.\n- Add the below details:\n- Application Name: `sample`\n- Project - `default`\n- SYNC POLICY: `Manual`\n- REPO URL: `https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy`\n- Revision: `HEAD`\n- Path: `kubernetes`\n\n![app details one](./images/app_argo_1.png)\n\n- Cluster - Select the default one `https://kubernetes.default.svc` to deploy in-cluster\n- Namespace - `default`\n- Click Create to finish\n\n![app details two](./images/app_argo_2.png)\n\n- You will now see the available apps.\n\n![sampleapp create](./images/sampleapp_create.png)\n\n- Initially, the app will be out of sync. It is yet to be deployed. You need to sync it for deploying.\n\nTo sync the application, click `SYNC` and then `SYNCHRONIZE`.\n\n![out of sync](./images/out_of_sync.png)\n\n- Wait till the app is deployed.\n\n![synched app](./images/synched_app.png)\n\n- Once the app is deployed, click on it to see the details.\n\n![sample app deployed](./images/sample_app_deployed.png)\n\n![sample app full deployment](./images/sample_app_full_deployment.png)\n\n## Verifying the deployment\n\n- Access the app to verify if it is correctly deployed.\n- List the cloudnativesampleapp-service service\n    ```bash\n    kubectl get svc cloudnativesampleapp-service\n    ```\n    It will have the `NodePort` for the application. In this case, it is `30499`. \n    ```\n    NAME                           TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE\n    cloudnativesampleapp-service   NodePort   172.21.118.165   <none>        9080:30499/TCP   20s\n    ```\n- Set an environment variable `APP_URL` using the `Node's IP` and `NodePort` values\n    ```bash\n    export APP_NODE_PORT=\"$(kubectl get svc cloudnativesampleapp-service -n default -o jsonpath='{.spec.ports[0].nodePort}')\"\n    export APP_URL=\"$NODE_EXTERNAL_IP:$APP_NODE_PORT\"\n    echo Application=$APP_URL\n    ```\n- Access the url using `curl`\n    ```bash\n    curl \"$APP_URL/greeting?name=Carlos\"\n    ```\n    ```\n    {\"id\":2,\"content\":\"Welcome to Cloudnative bootcamp !!! Hello, Carlos :)\"}\n    ```\n\n## References\n\n- [ArgoCD](https://argoproj.github.io/argo-cd/)\n","type":"Mdx","contentDigest":"2c3db6d5d4fe10fbe631930f25c47963","owner":"gatsby-plugin-mdx","counter":551},"frontmatter":{"title":"ArgoCD Lab","description":"Lab for continuous delivery using ArgoCD","tabs":["Openshift","IKS","Minikube"]},"exports":{},"rawBody":"---\ntitle: ArgoCD Lab\ndescription: Lab for continuous delivery using ArgoCD\ntabs: ['Openshift', 'IKS', 'Minikube']\n---\n\n## Pre-requisites\n\nMake sure your environment is setup properly for the lab.\n\nCheck the [Environment Setup](../prerequisites/#environment-setup) page for your setup.\n\n## ArgoCD Installation\n\n- Create the namespace `argocd` to install argocd\n    ```bash\n    kubectl create namespace argocd\n    export ARGOCD_NAMESPACE=argocd\n    ```\n- Create RBAC resources\n    ```bash\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/service_account.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/role.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/role_binding.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/ibm-cloud-architecture/learning-cloudnative-101/master/static/yamls/argo-lab/argo-clusteradmin.yaml\n    ```\n\n- Install CRDs\n    ```bash\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/argo-cd/argoproj.io_applications_crd.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/argo-cd/argoproj.io_appprojects_crd.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/crds/argoproj.io_argocdexports_crd.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/crds/argoproj.io_argocds_crd.yaml\n    ```\n    Verify CRDs\n    ```bash\n    kubectl get crd -n argocd\n    ```\n    ```\n    NAME                        CREATED AT\n    applications.argoproj.io    2020-05-15T02:05:55Z\n    appprojects.argoproj.io     2020-05-15T02:05:56Z\n    argocdexports.argoproj.io   2020-05-15T02:08:21Z\n    argocds.argoproj.io         2020-05-15T02:08:21Z\n    ```\n- Deploy Operator\n    ```bash\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/operator.yaml\n    ```\n- Deploy ArgoCD CO\n    ```bash\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/examples/argocd-lb.yaml\n    ```\n    Verify that ArgoCD Pods are running\n    ```bash\n    kubectl get pods -n argocd\n    ```\n    ```\n    NAME                                                     READY   STATUS    RESTARTS   AGE\n    argocd-operator-5f7d8cf7d8-486vn                         1/1     Running   0          3m46s\n    example-argocd-application-controller-7dc5fcb75d-xkk5h   1/1     Running   0          2m3s\n    example-argocd-dex-server-bb9df96cb-ndmhl                1/1     Running   0          2m3s\n    example-argocd-redis-756b6764-sb2gt                      1/1     Running   0          2m3s\n    example-argocd-repo-server-75944fcf87-zmh48              1/1     Running   0          2m3s\n    example-argocd-server-747b684c8c-xhgl9                   1/1     Running   0          2m3s\n    ```\n    Verify that the other ArgoCD resources are created\n    ```\n    kubectl get cm,secret,svc,deploy -n argocd\n    ```\n- List the argocd-server service\n    ```bash\n    kubectl get svc example-argocd-server -n argocd\n    ```\n\n- From the script, the Argo Server service has a `type` of `LoadBalancer`. If the `ExternalIP` is in a `pending` state, then there is no loadBalancer for your cluster, so we only need the the ArgoCD server's `NodePort`. Otherwise use the `ExternalIP` and `NodePort` to access Argo.\n    ```\n    NAME                    TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)                      AGE\n    example-argocd-server   LoadBalancer   10.105.73.245   <pending>   80:31138/TCP,443:31932/TCP   5m3s\n    ```\n\n- To access the service we need the `Node's External IP` and the `NodePort`. Let's set an environment variable `ARGOCD_URL` with `NODE_EXTERNAL_IP`:`NodePort`.\n    ```bash\n    export NODE_EXTERNAL_IP=\"$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type==\"ExternalIP\")].address}')\"\n    export ARGOCD_NODEPORT=\"$(kubectl get svc example-argocd-server -n $ARGOCD_NAMESPACE -o jsonpath='{.spec.ports[0].nodePort}')\"\n    export ARGOCD_URL=\"https://$NODE_EXTERNAL_IP:$ARGOCD_NODEPORT\"\n    echo ARGOCD_URL=$ARGOCD_URL\n    ```\n\n- If you can't access the NodePort from your computer and only http/80 then edit the argocd-server and add the flag `--insecure`\n    ```bash\n    kubectl edit -n argocd deployment example-argocd-server\n    ```\n    Use the kube api to proxy into the argocd server using `kubectl port-forward`\n    ```\n    kubectl port-forward service/example-argocd-server 8080:80 -n argocd\n    ```\n    Then you can access the argocd server locally on port 8080 [http://localhost:8080](http://localhost:8080)\n\n## Deploying the app\n\n- Login using the Browser into the UI using `$ARGOCD_URL` or `localhost:8080` if using port-forward\n- Use `admin` as the username and get the password with the following command\n    ```bash\n    kubectl get secret example-argocd-cluster -n $ARGOCD_NAMESPACE -o jsonpath='{.data.admin\\.password}' | base64 -d\n    ```\n    For example the output is similar to this:\n    ```\n    tyafMb7BNvO0kP9eizx3CojrK8pYJFQq\n    ```\n\n![ArgoCD Login](./images/argocd_login.png)\n\n- Now go back to the ArgoCD home and click on `NEW APP`.\n- Add the below details:\n- Application Name: `sample`\n- Project - `default`\n- SYNC POLICY: `Manual`\n- REPO URL: `https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy`\n- Revision: `HEAD`\n- Path: `kubernetes`\n\n![app details one](./images/app_argo_1.png)\n\n- Cluster - Select the default one `https://kubernetes.default.svc` to deploy in-cluster\n- Namespace - `default`\n- Click Create to finish\n\n![app details two](./images/app_argo_2.png)\n\n- You will now see the available apps.\n\n![sampleapp create](./images/sampleapp_create.png)\n\n- Initially, the app will be out of sync. It is yet to be deployed. You need to sync it for deploying.\n\nTo sync the application, click `SYNC` and then `SYNCHRONIZE`.\n\n![out of sync](./images/out_of_sync.png)\n\n- Wait till the app is deployed.\n\n![synched app](./images/synched_app.png)\n\n- Once the app is deployed, click on it to see the details.\n\n![sample app deployed](./images/sample_app_deployed.png)\n\n![sample app full deployment](./images/sample_app_full_deployment.png)\n\n## Verifying the deployment\n\n- Access the app to verify if it is correctly deployed.\n- List the cloudnativesampleapp-service service\n    ```bash\n    kubectl get svc cloudnativesampleapp-service\n    ```\n    It will have the `NodePort` for the application. In this case, it is `30499`. \n    ```\n    NAME                           TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE\n    cloudnativesampleapp-service   NodePort   172.21.118.165   <none>        9080:30499/TCP   20s\n    ```\n- Set an environment variable `APP_URL` using the `Node's IP` and `NodePort` values\n    ```bash\n    export APP_NODE_PORT=\"$(kubectl get svc cloudnativesampleapp-service -n default -o jsonpath='{.spec.ports[0].nodePort}')\"\n    export APP_URL=\"$NODE_EXTERNAL_IP:$APP_NODE_PORT\"\n    echo Application=$APP_URL\n    ```\n- Access the url using `curl`\n    ```bash\n    curl \"$APP_URL/greeting?name=Carlos\"\n    ```\n    ```\n    {\"id\":2,\"content\":\"Welcome to Cloudnative bootcamp !!! Hello, Carlos :)\"}\n    ```\n\n## References\n\n- [ArgoCD](https://argoproj.github.io/argo-cd/)\n","fileAbsolutePath":"/home/runner/work/learning-cloudnative-101/learning-cloudnative-101/src/pages/lectures/continuous-deployment/activities/iks.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3037994772","3037994772","530240012","530240012","768070550"]}