{"componentChunkName":"component---src-pages-lectures-continuous-deployment-activities-minikube-mdx","path":"/lectures/continuous-deployment/activities/minikube/","result":{"pageContext":{"frontmatter":{"title":"ArgoCD Lab","description":"Lab for continuous delivery using ArgoCD","tabs":["Openshift","IKS","Minikube"]},"relativePagePath":"/lectures/continuous-deployment/activities/minikube.mdx","titleType":"page","MdxNode":{"id":"9287730d-d37c-5cfb-901f-d0e990cec5ae","children":[],"parent":"6aabbf57-6683-5228-b9ef-8a312d0ed4f7","internal":{"content":"---\ntitle: ArgoCD Lab\ndescription: Lab for continuous delivery using ArgoCD\ntabs: ['Openshift', 'IKS', 'Minikube']\n---\n\n## Pre-requisites\n\nMake sure your environment is setup properly for the lab.\n\nCheck the [Environment Setup](../prerequisites/#environment-setup) page for your setup.\n\n- Install the `argocd` CLI, for example on OSX use brew\n    ```bash\n    brew tap argoproj/tap\n    brew install argoproj/tap/argocd\n    ```\n\n- Remember to have minikube tunnel running in another terminal\n    ```bash\n    minikube tunnel\n    ```\n\n## ArgoCD Installation\n\n- Create the namespace `argocd` to install argocd\n    ```bash\n    kubectl create namespace argocd\n    ```\n- Create RBAC resources\n    ```bash\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/service_account.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/role.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/role_binding.yaml\n    ```\n    Create ClusterRoleBinding for `cluster-admin` role for `sa` `argocd-application-controller` in namespace `argocd`\n    ```bash\n    cat <<'EOF' | kubectl create -f -\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: ClusterRoleBinding\n    metadata:\n      labels:\n        app.kubernetes.io/component: application-controller\n        app.kubernetes.io/name: argocd-application-controller\n        app.kubernetes.io/part-of: argocd\n      name: argocd-application-controller\n    roleRef:\n      apiGroup: rbac.authorization.k8s.io\n      kind: ClusterRole\n      name: cluster-admin\n    subjects:\n      - kind: ServiceAccount\n        name: argocd-application-controller\n        namespace: argocd\n    EOF\n    ```\n- Install CRDs\n    ```bash\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/argo-cd/argoproj.io_applications_crd.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/argo-cd/argoproj.io_appprojects_crd.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/crds/argoproj.io_argocdexports_crd.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/crds/argoproj.io_argocds_crd.yaml\n    ```\n    Verify CRDs\n    ```bash\n    kubectl get crd -n argocd\n    ```\n    ```\n    NAME                        CREATED AT\n    applications.argoproj.io    2020-05-15T02:05:55Z\n    appprojects.argoproj.io     2020-05-15T02:05:56Z\n    argocdexports.argoproj.io   2020-05-15T02:08:21Z\n    argocds.argoproj.io         2020-05-15T02:08:21Z\n    ```\n- Deploy Operator\n    ```bash\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/operator.yaml\n    ```\n- Deploy ArgoCD CO\n    ```bash\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/examples/argocd-lb.yaml\n    ```\n    Verify that ArgoCD Pods are running\n    ```bash\n    kubectl get pods -n argocd\n    ```\n    ```\n    NAME                                                     READY   STATUS    RESTARTS   AGE\n    argocd-operator-5f7d8cf7d8-486vn                         1/1     Running   0          3m46s\n    example-argocd-application-controller-7dc5fcb75d-xkk5h   1/1     Running   0          2m3s\n    example-argocd-dex-server-bb9df96cb-ndmhl                1/1     Running   0          2m3s\n    example-argocd-redis-756b6764-sb2gt                      1/1     Running   0          2m3s\n    example-argocd-repo-server-75944fcf87-zmh48              1/1     Running   0          2m3s\n    example-argocd-server-747b684c8c-xhgl9                   1/1     Running   0          2m3s\n    ```\n    Verify that the other ArgoCD resources are created\n    ```\n    kubectl get cm,secret,svc,deploy -n argocd\n    ```\n- Expose the ArgoCD Server service as a NodePort.\n    ```bash\n    kubectl expose deployment.apps/example-argocd-server --type=\"NodePort\" --port 8080 --name=argo-nodeport -n argocd  \n    ```\n- List the argocd-server service\n    ```bash\n    kubectl get svc example-argocd-server -n argocd\n    ```\n    It should have an IP under `EXTERNAL-IP` column\n    ```\n    NAME                    TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n    example-argocd-server   LoadBalancer   172.21.106.88   <pending>     80:32010/TCP,443:31861/TCP   111m\n    ```\n- Set an environment variable `ARGOCD_URL` using the `EXTERNAL-IP`\n    ```bash\n    export ARGOCD_NAMESPACE=argocd\n    export ARGOCD_SERVER=\"$(kubectl get svc example-argocd-server -n $ARGOCD_NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\"\n    export ARGOCD_URL=\"https://$ARGOCD_SERVER\"\n    echo ARGOCD_URL=$ARGOCD_URL\n    echo ARGOCD_SERVER=$ARGOCD_SERVER\n    ```\n\n## Deploying the app\n\n- Login into the UI.\n    ```bash\n    open $ARGOCD_URL\n    ```\n- Use `admin` as the username and get the password with the following command\n    ```bash\n    kubectl get secret example-argocd-cluster -n $ARGOCD_NAMESPACE -o jsonpath='{.data.admin\\.password}' | base64 -d\n    ```\n    For example the output is similar to this:\n    ```\n    tyafMb7BNvO0kP9eizx3CojrK8pYJFQq\n    ```\n\n![ArgoCD Login](./images/argocd_login.png)\n\n- Now go back to the ArgoCD home and click on `NEW APP`.\n- Add the below details:\n- Application Name: `sample`\n- Project - `default`\n- SYNC POLICY: `Manual`\n- REPO URL: `https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy`\n- Revision: `HEAD`\n- Path: `kubernetes`\n\n![app details one](./images/app_argo_1.png)\n\n- Cluster - Select the default one `https://kubernetes.default.svc` to deploy in-cluster\n- Namespace - `default`\n- Click Create to finish\n\n![app details two](./images/app_argo_2.png)\n\n- You will now see the available apps.\n\n![sampleapp create](./images/sampleapp_create.png)\n\n- Initially, the app will be out of sync. It is yet to be deployed. You need to sync it for deploying.\n\nTo sync the application, click `SYNC` and then `SYNCHRONIZE`.\n\n![out of sync](./images/out_of_sync.png)\n\n- Wait till the app is deployed.\n\n![synched app](./images/synched_app.png)\n\n- Once the app is deployed, click on it to see the details.\n\n![sample app deployed](./images/sample_app_deployed.png)\n\n![sample app full deployment](./images/sample_app_full_deployment.png)\n\n## Verifying the deployment\n\n- Access the app to verify if it is correctly deployed.\n- List the cloudnativesampleapp-service service\n    ```bash\n    kubectl get svc cloudnativesampleapp-service\n    ```\n    It should have an IP under `EXTERNAL-IP` column\n    ```\n    NAME                           TYPE           CLUSTER-IP       EXTERNAL-IP      PORT(S)          AGE\n    cloudnativesampleapp-service   NodePort       10.109.242.212   10.109.242.212   9080:31905/TCP   13m\n    ```\n- Set an environment variable `APP_URL` using the `EXTERNAL-IP` and `NodePort` values\n    ```bash\n    export APP_URL=\"$(minikube service --url cloudnativesampleapp-service -n default)\"\n    echo APP_URL=$APP_URL\n    ```\n- Access the url using `curl`\n    ```bash\n    curl \"$APP_URL/greeting?name=Carlos\"\n    ```\n    ```\n    {\"id\":2,\"content\":\"Welcome to Cloudnative bootcamp !!! Hello, Carlos :)\"}\n    ```\n\n## Using the ArgoCD CLI\n\n- Login using the cli.\n- Use `admin` as the username and get the password with the following command\n    ```bash\n    export ARGOCD_PASSWORD=$(kubectl get secret example-argocd-cluster -n $ARGOCD_NAMESPACE -o jsonpath='{.data.admin\\.password}' | base64 -d)\n    echo $ARGOCD_PASSWORD\n    ```\n- Now login as follows.\n    ```bash\n    argocd login --username admin --password $ARGOCD_PASSWORD $ARGOCD_SERVER\n    ```\n    ```\n    WARNING: server certificate had error: x509: cannot validate certificate for 10.97.240.99 because it doesn't contain \n    any IP SANs. Proceed insecurely (y/n)? y\n\n    'admin' logged in successfully\n    Context '10.105.73.245' updated\n    ```\n- List the applications\n    ```bash\n    argocd app list\n    ```\n    ```\n    NAME    CLUSTER                         NAMESPACE  PROJECT  STATUS  HEALTH   SYNCPOLICY  CONDITIONS  REPO                                                                     PATH   TARGET\n    sample  https://kubernetes.default.svc  default    default  Synced  Healthy  <none>      <none>      https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy  kubernetes  HEAD\n    ```\n- Get application details\n    ```bash\n    argocd app get sample\n    ```\n    ```\n    Name:               sample\n    Project:            default\n    Server:             https://kubernetes.default.svc\n    Namespace:          default\n    URL:                https://10.97.240.99/applications/sample\n    Repo:               https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy\n    Target:             HEAD\n    Path:               kubernetes\n    SyncWindow:         Sync Allowed\n    Sync Policy:        <none>\n    Sync Status:        Synced to HEAD (9684037)\n    Health Status:      Healthy\n\n    GROUP  KIND        NAMESPACE  NAME                             STATUS  HEALTH   HOOK  MESSAGE\n        Service     default    cloudnativesampleapp-service     Synced  Healthy        service/cloudnativesampleapp-service created\n    apps   Deployment  default    cloudnativesampleapp-deployment  Synced  Healthy        deployment.apps/cloudnativesampleapp-deployment created\n    ```\n- Show application deployment history\n    ```bash\n    argocd app history sample\n    ```\n    ```\n    ID  DATE                           REVISION\n    0   2020-02-12 21:10:32 -0500 EST  HEAD (9684037)\n    ```\n## References\n\n- [ArgoCD](https://argoproj.github.io/argo-cd/)\n","type":"Mdx","contentDigest":"654d05795a16d8ace1936e4b12a03ba4","owner":"gatsby-plugin-mdx","counter":549},"frontmatter":{"title":"ArgoCD Lab","description":"Lab for continuous delivery using ArgoCD","tabs":["Openshift","IKS","Minikube"]},"exports":{},"rawBody":"---\ntitle: ArgoCD Lab\ndescription: Lab for continuous delivery using ArgoCD\ntabs: ['Openshift', 'IKS', 'Minikube']\n---\n\n## Pre-requisites\n\nMake sure your environment is setup properly for the lab.\n\nCheck the [Environment Setup](../prerequisites/#environment-setup) page for your setup.\n\n- Install the `argocd` CLI, for example on OSX use brew\n    ```bash\n    brew tap argoproj/tap\n    brew install argoproj/tap/argocd\n    ```\n\n- Remember to have minikube tunnel running in another terminal\n    ```bash\n    minikube tunnel\n    ```\n\n## ArgoCD Installation\n\n- Create the namespace `argocd` to install argocd\n    ```bash\n    kubectl create namespace argocd\n    ```\n- Create RBAC resources\n    ```bash\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/service_account.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/role.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/role_binding.yaml\n    ```\n    Create ClusterRoleBinding for `cluster-admin` role for `sa` `argocd-application-controller` in namespace `argocd`\n    ```bash\n    cat <<'EOF' | kubectl create -f -\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: ClusterRoleBinding\n    metadata:\n      labels:\n        app.kubernetes.io/component: application-controller\n        app.kubernetes.io/name: argocd-application-controller\n        app.kubernetes.io/part-of: argocd\n      name: argocd-application-controller\n    roleRef:\n      apiGroup: rbac.authorization.k8s.io\n      kind: ClusterRole\n      name: cluster-admin\n    subjects:\n      - kind: ServiceAccount\n        name: argocd-application-controller\n        namespace: argocd\n    EOF\n    ```\n- Install CRDs\n    ```bash\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/argo-cd/argoproj.io_applications_crd.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/argo-cd/argoproj.io_appprojects_crd.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/crds/argoproj.io_argocdexports_crd.yaml\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/crds/argoproj.io_argocds_crd.yaml\n    ```\n    Verify CRDs\n    ```bash\n    kubectl get crd -n argocd\n    ```\n    ```\n    NAME                        CREATED AT\n    applications.argoproj.io    2020-05-15T02:05:55Z\n    appprojects.argoproj.io     2020-05-15T02:05:56Z\n    argocdexports.argoproj.io   2020-05-15T02:08:21Z\n    argocds.argoproj.io         2020-05-15T02:08:21Z\n    ```\n- Deploy Operator\n    ```bash\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/deploy/operator.yaml\n    ```\n- Deploy ArgoCD CO\n    ```bash\n    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-operator/v0.0.8/examples/argocd-lb.yaml\n    ```\n    Verify that ArgoCD Pods are running\n    ```bash\n    kubectl get pods -n argocd\n    ```\n    ```\n    NAME                                                     READY   STATUS    RESTARTS   AGE\n    argocd-operator-5f7d8cf7d8-486vn                         1/1     Running   0          3m46s\n    example-argocd-application-controller-7dc5fcb75d-xkk5h   1/1     Running   0          2m3s\n    example-argocd-dex-server-bb9df96cb-ndmhl                1/1     Running   0          2m3s\n    example-argocd-redis-756b6764-sb2gt                      1/1     Running   0          2m3s\n    example-argocd-repo-server-75944fcf87-zmh48              1/1     Running   0          2m3s\n    example-argocd-server-747b684c8c-xhgl9                   1/1     Running   0          2m3s\n    ```\n    Verify that the other ArgoCD resources are created\n    ```\n    kubectl get cm,secret,svc,deploy -n argocd\n    ```\n- Expose the ArgoCD Server service as a NodePort.\n    ```bash\n    kubectl expose deployment.apps/example-argocd-server --type=\"NodePort\" --port 8080 --name=argo-nodeport -n argocd  \n    ```\n- List the argocd-server service\n    ```bash\n    kubectl get svc example-argocd-server -n argocd\n    ```\n    It should have an IP under `EXTERNAL-IP` column\n    ```\n    NAME                    TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n    example-argocd-server   LoadBalancer   172.21.106.88   <pending>     80:32010/TCP,443:31861/TCP   111m\n    ```\n- Set an environment variable `ARGOCD_URL` using the `EXTERNAL-IP`\n    ```bash\n    export ARGOCD_NAMESPACE=argocd\n    export ARGOCD_SERVER=\"$(kubectl get svc example-argocd-server -n $ARGOCD_NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\"\n    export ARGOCD_URL=\"https://$ARGOCD_SERVER\"\n    echo ARGOCD_URL=$ARGOCD_URL\n    echo ARGOCD_SERVER=$ARGOCD_SERVER\n    ```\n\n## Deploying the app\n\n- Login into the UI.\n    ```bash\n    open $ARGOCD_URL\n    ```\n- Use `admin` as the username and get the password with the following command\n    ```bash\n    kubectl get secret example-argocd-cluster -n $ARGOCD_NAMESPACE -o jsonpath='{.data.admin\\.password}' | base64 -d\n    ```\n    For example the output is similar to this:\n    ```\n    tyafMb7BNvO0kP9eizx3CojrK8pYJFQq\n    ```\n\n![ArgoCD Login](./images/argocd_login.png)\n\n- Now go back to the ArgoCD home and click on `NEW APP`.\n- Add the below details:\n- Application Name: `sample`\n- Project - `default`\n- SYNC POLICY: `Manual`\n- REPO URL: `https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy`\n- Revision: `HEAD`\n- Path: `kubernetes`\n\n![app details one](./images/app_argo_1.png)\n\n- Cluster - Select the default one `https://kubernetes.default.svc` to deploy in-cluster\n- Namespace - `default`\n- Click Create to finish\n\n![app details two](./images/app_argo_2.png)\n\n- You will now see the available apps.\n\n![sampleapp create](./images/sampleapp_create.png)\n\n- Initially, the app will be out of sync. It is yet to be deployed. You need to sync it for deploying.\n\nTo sync the application, click `SYNC` and then `SYNCHRONIZE`.\n\n![out of sync](./images/out_of_sync.png)\n\n- Wait till the app is deployed.\n\n![synched app](./images/synched_app.png)\n\n- Once the app is deployed, click on it to see the details.\n\n![sample app deployed](./images/sample_app_deployed.png)\n\n![sample app full deployment](./images/sample_app_full_deployment.png)\n\n## Verifying the deployment\n\n- Access the app to verify if it is correctly deployed.\n- List the cloudnativesampleapp-service service\n    ```bash\n    kubectl get svc cloudnativesampleapp-service\n    ```\n    It should have an IP under `EXTERNAL-IP` column\n    ```\n    NAME                           TYPE           CLUSTER-IP       EXTERNAL-IP      PORT(S)          AGE\n    cloudnativesampleapp-service   NodePort       10.109.242.212   10.109.242.212   9080:31905/TCP   13m\n    ```\n- Set an environment variable `APP_URL` using the `EXTERNAL-IP` and `NodePort` values\n    ```bash\n    export APP_URL=\"$(minikube service --url cloudnativesampleapp-service -n default)\"\n    echo APP_URL=$APP_URL\n    ```\n- Access the url using `curl`\n    ```bash\n    curl \"$APP_URL/greeting?name=Carlos\"\n    ```\n    ```\n    {\"id\":2,\"content\":\"Welcome to Cloudnative bootcamp !!! Hello, Carlos :)\"}\n    ```\n\n## Using the ArgoCD CLI\n\n- Login using the cli.\n- Use `admin` as the username and get the password with the following command\n    ```bash\n    export ARGOCD_PASSWORD=$(kubectl get secret example-argocd-cluster -n $ARGOCD_NAMESPACE -o jsonpath='{.data.admin\\.password}' | base64 -d)\n    echo $ARGOCD_PASSWORD\n    ```\n- Now login as follows.\n    ```bash\n    argocd login --username admin --password $ARGOCD_PASSWORD $ARGOCD_SERVER\n    ```\n    ```\n    WARNING: server certificate had error: x509: cannot validate certificate for 10.97.240.99 because it doesn't contain \n    any IP SANs. Proceed insecurely (y/n)? y\n\n    'admin' logged in successfully\n    Context '10.105.73.245' updated\n    ```\n- List the applications\n    ```bash\n    argocd app list\n    ```\n    ```\n    NAME    CLUSTER                         NAMESPACE  PROJECT  STATUS  HEALTH   SYNCPOLICY  CONDITIONS  REPO                                                                     PATH   TARGET\n    sample  https://kubernetes.default.svc  default    default  Synced  Healthy  <none>      <none>      https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy  kubernetes  HEAD\n    ```\n- Get application details\n    ```bash\n    argocd app get sample\n    ```\n    ```\n    Name:               sample\n    Project:            default\n    Server:             https://kubernetes.default.svc\n    Namespace:          default\n    URL:                https://10.97.240.99/applications/sample\n    Repo:               https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy\n    Target:             HEAD\n    Path:               kubernetes\n    SyncWindow:         Sync Allowed\n    Sync Policy:        <none>\n    Sync Status:        Synced to HEAD (9684037)\n    Health Status:      Healthy\n\n    GROUP  KIND        NAMESPACE  NAME                             STATUS  HEALTH   HOOK  MESSAGE\n        Service     default    cloudnativesampleapp-service     Synced  Healthy        service/cloudnativesampleapp-service created\n    apps   Deployment  default    cloudnativesampleapp-deployment  Synced  Healthy        deployment.apps/cloudnativesampleapp-deployment created\n    ```\n- Show application deployment history\n    ```bash\n    argocd app history sample\n    ```\n    ```\n    ID  DATE                           REVISION\n    0   2020-02-12 21:10:32 -0500 EST  HEAD (9684037)\n    ```\n## References\n\n- [ArgoCD](https://argoproj.github.io/argo-cd/)\n","fileAbsolutePath":"/home/runner/work/learning-cloudnative-101/learning-cloudnative-101/src/pages/lectures/continuous-deployment/activities/minikube.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3037994772","3037994772","530240012","530240012","768070550"]}