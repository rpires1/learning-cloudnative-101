{"componentChunkName":"component---src-pages-lectures-containers-index-mdx","path":"/lectures/containers/","result":{"pageContext":{"frontmatter":{"title":"Containers Lecture","description":"Containers Lecture"},"relativePagePath":"/lectures/containers/index.mdx","titleType":"page","MdxNode":{"id":"d0744a56-256b-58e6-ab11-1fd16da92d67","children":[],"parent":"de17853d-b035-50bf-808d-76588f5273c5","internal":{"content":"---\ntitle: Containers Lecture\ndescription: Containers Lecture\n---\n\n# Containers\n\nContainers are a standard way to package an application and all its dependencies so that it can be moved between environments and run without change. They work by hiding the differences between applications inside the container so that everything outside the container can be standardized.\n\nFor example, Docker created standard way to create images for Linux Containers.\n\n## Resources\n\n<MiniCard\n  title=\"Container Basics Presentation\"\n  href=\"/slides/02-Containers-Basics.pdf\"\n></MiniCard>\n\n## Basic Docker Commands\n\n| Action                      | Command                                     |\n| --------------------------- | ------------------------------------------- |\n| Get Docker version          | `docker version`                            |\n| Run `hello-world` Container | `docker run hello-world`                    |\n| List Running Containers     | `docker ps`                                 |\n| Stop a container            | `docker stop <container-name/container-id>` |\n| List Docker Images          | ` docker images`                            |\n| Login into registry         | `docker login`                              |\n| Build an image              | `docker build -t <image_name>:<tag> .`      |\n| Inspect a docker object     | ` docker inspect <name/id>`                 |\n| Inspect a docker image      | ` docker inspect image <name/id>`           |\n| Pull an image               | ` docker pull <image_name>:<tag>`           |\n| Push an Image               | ` docker push <image_name>:<tag>`           |\n| Remove a container          | ` docker rm <container-name/container-id>`  |\n\n## Running Docker on Kubernetes\n\n<ol>\n  <li>\n    Make sure you are logged in to your Kubernetes cluster through a terminal or\n    IBM Cloud Shell.\n  </li>\n\n\n{\" \"}\n\n<li>\n  Next, we need to apply the yaml file for the Docker in Docker pod.\n  <code>\n    kubectl apply -f\n    https://raw.githubusercontent.com/ibm-cloud-architecture/learning-cloudnative-101/master/static/yamls/containers/dind.yaml\n  </code>\n</li>\n\n{\" \"}\n\n<li>\n  Then, we need to bash into the running pod.\n  <code>kubectl exec -it dind bash</code>\n</li>\n\n  <li>\n    Finally check to make sure you can run docker commands, such as{\" \"}\n    <strong>\n      <em>docker version</em>\n    </strong>\n  </li>\n</ol>\n\n\n## Docker Lecture Walkthroughs\n\n<Accordion>\n  <AccordionItem title=\"Verify Docker Installation\">\n    <ol>\n      <li>\n        Check the Docker Version\n        <code>docker version</code>\n      </li>\n      <li>\n        Run the `hello-world` container\n        <code>docker run hello-world</code>\n        <InlineNotification>\n          Notice: If it is not already on your machine, it will be downloaded\n          automatically.\n        </InlineNotification>\n      </li>\n      <li>\n        Check the output:\n        <blockquote>\n          Hello from Docker! <br></br>\n          This message shows that your installation appears to be working\n          correctly!....\n        </blockquote>\n      </li>\n    </ol>\n  </AccordionItem>\n  <AccordionItem title=\"Running a Basic Container\">\n    <ol>\n      <li>\n        Start and nginx container and name it `nginx`.\n        <code>docker run --rm -d --name nginx -p 8080:8080 bitnami/nginx</code>\n      </li>\n      <li>\n        Check to see if the container is running\n        <code>docker ps</code>\n      </li>\n      <li>\n        Bash into the running nginx container\n        <code>docker exec -it nginx bash</code>\n      </li>\n      <li>\n        Accessing the running nginx container\n        <code>curl http://localhost:8080</code>\n      </li>\n      <li>\n        Stopping the nginx container\n        <code>docker stop nginx</code>\n      </li>\n    </ol>\n  </AccordionItem>\n  <AccordionItem title=\"Building and Running a Docker Image\">\n    <ol>\n      <li>\n        Let's start by creating a directory named{\" \"}\n        <strong>\n          <em>assets</em>\n        </strong>{\" \"}\n        and add an{\" \"}\n        <strong>\n          <em>index.html</em>\n        </strong>{\" \"}\n        file to it. <br></br>\n        <code>\n          mkdir -p assets; echo \"Welcome to the Cloud Native BootCamp\" >\n          assets/index.html; cd assets\n        </code>\n      </li>\n      <li>\n        Download the sample{\" \"}\n        <strong>\n          <em>Dockerfile</em>\n        </strong>{\" \"}\n        into the{\" \"}\n        <strong>\n          <em>assets</em>\n        </strong>{\" \"}\n        directory.\n        <code>\n          wget\n          https://raw.githubusercontent.com/ibm-cloud-architecture/learning-cloudnative-101/master/static/yamls/containers/Dockerfile\n        </code>\n      </li>\n      <li>\n        Build the docker image and name it{\" \"}\n        <strong>\n          <em>webserver</em>\n        </strong>{\" \"}\n        with a tag of{\" \"}\n        <strong>\n          <em>1.0</em>\n        </strong>\n        .<code>docker build -t webserver:1.0 .</code>\n      </li>\n      <li>\n        Run the new image in a container.\n        <code>docker run --rm -d -p 8000:8080 webserver:1.0</code>\n      </li>\n      <li>\n        Access the new container\n        <code>curl http://localhost:8000</code>\n      </li>\n    </ol>\n  </AccordionItem>\n  <AccordionItem title=\"Pushing to a Container Registry\">\n    <ol>\n      <li>\n        Login to Docker Hub using YOUR created username and password.\n        <code>docker login -u USERNAME -p PASSWORD</code>\n      </li>\n      <li>\n        Tag the docker image with docker hub username\n        <code>docker tag webserver:1.0 USERNAME/webserver:1.0</code>\n      </li>\n      <li>\n        Push the image to the registry\n        <code>docker push USERNAME/webserver:1.0</code>\n      </li>\n      <li>\n        Run the new image\n        <code>docker run --rm -p 8000:8080 USERNAME/webserver:1.0</code>\n      </li>\n      <li>\n        You can also pull down other images from other users.\n        <code>docker pull USERNAME/webserver:1.0</code>\n      </li>\n    </ol>\n  </AccordionItem>\n  <AccordionItem title=\"Adding Environment Variables for your Container.\">\n    <ol>\n      <li>\n        Create a Docker file\n        <code>\n          docker run --rm --name nginx -e USERNAME=Carlos -e PASSWORD=IlikeYAML\n          -e LOG_LEVEL=ERROR -p 8080:8080 bitnami/nginx\n        </code>\n      </li>\n      <li>\n        Create a Docker file\n        <code>\n          docker exec -it nginx sh -c \"env | grep\n          'USERNAME\\|PASSWORD\\|LOG_LEVEL'\"\n        </code>\n      </li>\n    </ol>\n  </AccordionItem>\n  <AccordionItem title=\"Running a Container with a Mounted Volume\">\n    <ol>\n      <li>\n        Run the image with a volume attached.\n        <code>\n          docker run --rm --name nginx -p 8080:8080 -v $PWD/assets:/app\n          bitnami/nginx\n        </code>\n      </li>\n    </ol>\n  </AccordionItem>\n</Accordion>\n\n## Activities\n\n| Task                    | Description                                                     | Link                                                                                                                         | Time   |\n| ----------------------- | --------------------------------------------------------------- | :--------------------------------------------------------------------------------------------------------------------------- | ------ |\n| **_ Walkthroughs _**    |                                                                 |                                                                                                                              |        |\n| What is a Container?    | A look under the the covers at what is a Linux Container?       | <a href=\"https://www.katacoda.com/courses/container-runtimes/what-is-a-container\" target=\"_blank\">Understand Containers</a>  | 10 min |\n| What is an Image?       | A look under the the covers at what is a Linux Container Image? | <a href=\"https://www.katacoda.com/courses/container-runtimes/what-is-a-container-image\" target=\"_blank\">Container Images</a> | 10 min |\n| Docker Basics           | Set of walkthroughs that cover docker basics                    | <a href=\"https://www.katacoda.com/courses/docker\" target=\"_blank\">Docker Basics</a>                                          | 10 min |\n| **_ Try It Yourself _** |                                                                 |                                                                                                                              |        |\n| IBM Container Registry  | Build and Deploy Run using IBM Container Registry               | [IBM Container Registry](./activities/ibmcloud-cr)                                                                           | 30 min |\n| Docker Lab              | Running a Sample Application on Docker                          | [Docker Lab](./activities/)                                                                                                  | 30 min |\n\nOnce you have completed these tasks, you should have a base understanding of containers and how to use Docker.\n","type":"Mdx","contentDigest":"70f9385f7a75eed2b3da7a39945177bb","owner":"gatsby-plugin-mdx","counter":527},"frontmatter":{"title":"Containers Lecture","description":"Containers Lecture"},"exports":{},"rawBody":"---\ntitle: Containers Lecture\ndescription: Containers Lecture\n---\n\n# Containers\n\nContainers are a standard way to package an application and all its dependencies so that it can be moved between environments and run without change. They work by hiding the differences between applications inside the container so that everything outside the container can be standardized.\n\nFor example, Docker created standard way to create images for Linux Containers.\n\n## Resources\n\n<MiniCard\n  title=\"Container Basics Presentation\"\n  href=\"/slides/02-Containers-Basics.pdf\"\n></MiniCard>\n\n## Basic Docker Commands\n\n| Action                      | Command                                     |\n| --------------------------- | ------------------------------------------- |\n| Get Docker version          | `docker version`                            |\n| Run `hello-world` Container | `docker run hello-world`                    |\n| List Running Containers     | `docker ps`                                 |\n| Stop a container            | `docker stop <container-name/container-id>` |\n| List Docker Images          | ` docker images`                            |\n| Login into registry         | `docker login`                              |\n| Build an image              | `docker build -t <image_name>:<tag> .`      |\n| Inspect a docker object     | ` docker inspect <name/id>`                 |\n| Inspect a docker image      | ` docker inspect image <name/id>`           |\n| Pull an image               | ` docker pull <image_name>:<tag>`           |\n| Push an Image               | ` docker push <image_name>:<tag>`           |\n| Remove a container          | ` docker rm <container-name/container-id>`  |\n\n## Running Docker on Kubernetes\n\n<ol>\n  <li>\n    Make sure you are logged in to your Kubernetes cluster through a terminal or\n    IBM Cloud Shell.\n  </li>\n\n\n{\" \"}\n\n<li>\n  Next, we need to apply the yaml file for the Docker in Docker pod.\n  <code>\n    kubectl apply -f\n    https://raw.githubusercontent.com/ibm-cloud-architecture/learning-cloudnative-101/master/static/yamls/containers/dind.yaml\n  </code>\n</li>\n\n{\" \"}\n\n<li>\n  Then, we need to bash into the running pod.\n  <code>kubectl exec -it dind bash</code>\n</li>\n\n  <li>\n    Finally check to make sure you can run docker commands, such as{\" \"}\n    <strong>\n      <em>docker version</em>\n    </strong>\n  </li>\n</ol>\n\n\n## Docker Lecture Walkthroughs\n\n<Accordion>\n  <AccordionItem title=\"Verify Docker Installation\">\n    <ol>\n      <li>\n        Check the Docker Version\n        <code>docker version</code>\n      </li>\n      <li>\n        Run the `hello-world` container\n        <code>docker run hello-world</code>\n        <InlineNotification>\n          Notice: If it is not already on your machine, it will be downloaded\n          automatically.\n        </InlineNotification>\n      </li>\n      <li>\n        Check the output:\n        <blockquote>\n          Hello from Docker! <br></br>\n          This message shows that your installation appears to be working\n          correctly!....\n        </blockquote>\n      </li>\n    </ol>\n  </AccordionItem>\n  <AccordionItem title=\"Running a Basic Container\">\n    <ol>\n      <li>\n        Start and nginx container and name it `nginx`.\n        <code>docker run --rm -d --name nginx -p 8080:8080 bitnami/nginx</code>\n      </li>\n      <li>\n        Check to see if the container is running\n        <code>docker ps</code>\n      </li>\n      <li>\n        Bash into the running nginx container\n        <code>docker exec -it nginx bash</code>\n      </li>\n      <li>\n        Accessing the running nginx container\n        <code>curl http://localhost:8080</code>\n      </li>\n      <li>\n        Stopping the nginx container\n        <code>docker stop nginx</code>\n      </li>\n    </ol>\n  </AccordionItem>\n  <AccordionItem title=\"Building and Running a Docker Image\">\n    <ol>\n      <li>\n        Let's start by creating a directory named{\" \"}\n        <strong>\n          <em>assets</em>\n        </strong>{\" \"}\n        and add an{\" \"}\n        <strong>\n          <em>index.html</em>\n        </strong>{\" \"}\n        file to it. <br></br>\n        <code>\n          mkdir -p assets; echo \"Welcome to the Cloud Native BootCamp\" >\n          assets/index.html; cd assets\n        </code>\n      </li>\n      <li>\n        Download the sample{\" \"}\n        <strong>\n          <em>Dockerfile</em>\n        </strong>{\" \"}\n        into the{\" \"}\n        <strong>\n          <em>assets</em>\n        </strong>{\" \"}\n        directory.\n        <code>\n          wget\n          https://raw.githubusercontent.com/ibm-cloud-architecture/learning-cloudnative-101/master/static/yamls/containers/Dockerfile\n        </code>\n      </li>\n      <li>\n        Build the docker image and name it{\" \"}\n        <strong>\n          <em>webserver</em>\n        </strong>{\" \"}\n        with a tag of{\" \"}\n        <strong>\n          <em>1.0</em>\n        </strong>\n        .<code>docker build -t webserver:1.0 .</code>\n      </li>\n      <li>\n        Run the new image in a container.\n        <code>docker run --rm -d -p 8000:8080 webserver:1.0</code>\n      </li>\n      <li>\n        Access the new container\n        <code>curl http://localhost:8000</code>\n      </li>\n    </ol>\n  </AccordionItem>\n  <AccordionItem title=\"Pushing to a Container Registry\">\n    <ol>\n      <li>\n        Login to Docker Hub using YOUR created username and password.\n        <code>docker login -u USERNAME -p PASSWORD</code>\n      </li>\n      <li>\n        Tag the docker image with docker hub username\n        <code>docker tag webserver:1.0 USERNAME/webserver:1.0</code>\n      </li>\n      <li>\n        Push the image to the registry\n        <code>docker push USERNAME/webserver:1.0</code>\n      </li>\n      <li>\n        Run the new image\n        <code>docker run --rm -p 8000:8080 USERNAME/webserver:1.0</code>\n      </li>\n      <li>\n        You can also pull down other images from other users.\n        <code>docker pull USERNAME/webserver:1.0</code>\n      </li>\n    </ol>\n  </AccordionItem>\n  <AccordionItem title=\"Adding Environment Variables for your Container.\">\n    <ol>\n      <li>\n        Create a Docker file\n        <code>\n          docker run --rm --name nginx -e USERNAME=Carlos -e PASSWORD=IlikeYAML\n          -e LOG_LEVEL=ERROR -p 8080:8080 bitnami/nginx\n        </code>\n      </li>\n      <li>\n        Create a Docker file\n        <code>\n          docker exec -it nginx sh -c \"env | grep\n          'USERNAME\\|PASSWORD\\|LOG_LEVEL'\"\n        </code>\n      </li>\n    </ol>\n  </AccordionItem>\n  <AccordionItem title=\"Running a Container with a Mounted Volume\">\n    <ol>\n      <li>\n        Run the image with a volume attached.\n        <code>\n          docker run --rm --name nginx -p 8080:8080 -v $PWD/assets:/app\n          bitnami/nginx\n        </code>\n      </li>\n    </ol>\n  </AccordionItem>\n</Accordion>\n\n## Activities\n\n| Task                    | Description                                                     | Link                                                                                                                         | Time   |\n| ----------------------- | --------------------------------------------------------------- | :--------------------------------------------------------------------------------------------------------------------------- | ------ |\n| **_ Walkthroughs _**    |                                                                 |                                                                                                                              |        |\n| What is a Container?    | A look under the the covers at what is a Linux Container?       | <a href=\"https://www.katacoda.com/courses/container-runtimes/what-is-a-container\" target=\"_blank\">Understand Containers</a>  | 10 min |\n| What is an Image?       | A look under the the covers at what is a Linux Container Image? | <a href=\"https://www.katacoda.com/courses/container-runtimes/what-is-a-container-image\" target=\"_blank\">Container Images</a> | 10 min |\n| Docker Basics           | Set of walkthroughs that cover docker basics                    | <a href=\"https://www.katacoda.com/courses/docker\" target=\"_blank\">Docker Basics</a>                                          | 10 min |\n| **_ Try It Yourself _** |                                                                 |                                                                                                                              |        |\n| IBM Container Registry  | Build and Deploy Run using IBM Container Registry               | [IBM Container Registry](./activities/ibmcloud-cr)                                                                           | 30 min |\n| Docker Lab              | Running a Sample Application on Docker                          | [Docker Lab](./activities/)                                                                                                  | 30 min |\n\nOnce you have completed these tasks, you should have a base understanding of containers and how to use Docker.\n","fileAbsolutePath":"/home/runner/work/learning-cloudnative-101/learning-cloudnative-101/src/pages/lectures/containers/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3037994772","3037994772","530240012","530240012","768070550"]}